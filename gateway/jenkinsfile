node('workers') {

   try{

     stage('checkout') {
      checkout scm
      //notifySlack('STARTED') 
      }

  stage('docker-login') {
    withCredentials( [usernamePassword(credentialsId: 'docker-hub',  usernameVariable: 'username', passwordVariable: 'password')]) {
      sh 'docker login -u $username -p $password '
    }
  
  }
  stage('docker-pull') {
    sh 'docker pull sijibomi242/eventer-gateway-dev:latest'
  }
  // parallel(
  //           // 'Quality Tests': {
  //           //     sh "docker run --rm sijibomi242/eventer-gateway-dev npm run lint"
  //           // },
  //           // 'unit Tests': {
  //           //     sh "docker run --rm sijibomi242/eventer-gateway-dev npm run test:ci"
  //           // }
  //           // 'Coverage Reports': {
  //           //     sh "docker run --rm -v $PWD/coverage:/app/coverage sijibomi242/eventer-gateway-dev npm run coverage-html"
  //           //     publishHTML (target: [
  //           //         allowMissing: false,
  //           //         alwaysLinkToLastBuild: false,
  //           //         keepAll: true,
  //           //         reportDir: "$PWD/coverage",
  //           //         reportFiles: "index.html",
  //           //         reportName: "Coverage Report"
  //           //     ])
  //           // }
  //       )

  stage ('git push pre-prod'){
     withCredentials( [usernamePassword(credentialsId: 'github',  usernameVariable: 'username', passwordVariable: 'password')]) {
        sh 'git config --global user.email "sijibomiolajubu@gmail.com"'
        sh 'git config --global user.name "sijibomii"'
        sh 'git checkout pre-prod'
        sh 'git pull origin dev'
        sh 'git pull'
        //sh 'git merge dev'
        sh 'git remote set-url origin https://$username:$password@github.com/$username/eventer.git'
        sh 'git push origin pre-prod'
    }   
  } 


   }catch(e){
      currentBuild.result = 'FAILED' 
      throw e
    } finally {
       //notifySlack(currentBuild.result) 
       //sendEmail(currentBuild.result)
       //role back kube deployment if any
    }
  
}

def sendEmail(String buildStatus){
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    emailext body: "More info at: ${env.BUILD_URL}",
             subject: "Name: '${env.JOB_NAME}' Status: ${buildStatus}",
             to: '$DEFAULT_RECIPIENTS'
}

def notifySlack(String buildStatus){
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    def colorCode = '#FF0000'
    def subject = "Name: '${env.JOB_NAME}'\nStatus: ${buildStatus}\nBuild ID: ${env.BUILD_NUMBER}"
    def summary = "${subject}\nMessage: ${commitMessage()}\nAuthor: ${commitAuthor()}\nURL: ${env.BUILD_URL}"

    if (buildStatus == 'STARTED') {
        colorCode = '#546e7a'
    } else if (buildStatus == 'SUCCESSFUL') {
        colorCode = '#2e7d32'
    } else {
        colorCode = '#c62828c'
    }

    slackSend (color: colorCode, message: summary)
}


def commitAuthor(){
    sh 'git show -s --pretty=%an > .git/commitAuthor'
    def commitAuthor = readFile('.git/commitAuthor').trim()
    sh 'rm .git/commitAuthor'
    commitAuthor
}

def commitID() {
    sh 'git rev-parse HEAD > .git/commitID'
    def commitID = readFile('.git/commitID').trim()
    sh 'rm .git/commitID'
    commitID
}

def commitMessage() {
    sh 'git log --format=%B -n 1 HEAD > .git/commitMessage'
    def commitMessage = readFile('.git/commitMessage').trim()
    sh 'rm .git/commitMessage'
    commitMessage
}